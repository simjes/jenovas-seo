---
import EpisodeNavigation from "@/components/EpisodeNavigation.astro";
import Hosts from "@/components/Hosts.astro";
import Layout from "@/components/Layout.astro";
import PodcastLinks from "@/components/PodcastLinks.astro";
import SpotifyEmbedEpisode from "@/components/SpotifyEmbedEpisode.astro";
import { authors, slugify } from "@/lib/meta";
import { getEpisodeDetails, getShowDetails } from "@/lib/spotify";
import { formatDate, formatDuration } from "@/lib/time";
import { SEO } from "astro-seo";
import { Schema } from "astro-seo-schema";
import { ArrowLeft, ArrowRight } from "lucide-astro";

export async function getStaticPaths() {
  const showDetails = await getShowDetails();
  const totalEpisodes = showDetails.total_episodes;

  return showDetails.episodes.items.map((entry, index) => ({
    params: { slug: slugify(entry.name) },
    props: {
      id: entry.id,
      episodeNumber: totalEpisodes - index,
      next:
        index > 0
          ? {
              slug: slugify(showDetails.episodes.items[index - 1].name),
              name: `${totalEpisodes - index + 1}. ${showDetails.episodes.items[index - 1].name}`,
            }
          : undefined,
      previous:
        index < showDetails.episodes.items.length - 1
          ? {
              slug: slugify(showDetails.episodes.items[index + 1].name),
              name: `${totalEpisodes - index - 1}. ${showDetails.episodes.items[index + 1].name}`,
            }
          : undefined,
    },
  }));
}

const { id, episodeNumber, next, previous } = Astro.props;
const episodeDetails = await getEpisodeDetails(id);
---

<Layout>
  <Fragment slot="head">
    <SEO
      title={episodeDetails.name}
      description={episodeDetails.description}
      openGraph={{
        basic: {
          title: episodeDetails.name,
          type: "website",
          image: episodeDetails.images[0].url,
          url: Astro.url.toString(),
        },
        optional: {
          description: episodeDetails.description,
        },
      }}
      twitter={{
        card: "summary_large_image",
        site: "@rad_crew",
        title: episodeDetails.name,
        description: episodeDetails.description,
        image: episodeDetails.images[0].url,
      }}
    />

    <Schema
      item={{
        "@context": "https://schema.org",
        "@type": "PodcastEpisode",
        name: episodeDetails.name,
        description: episodeDetails.description,
        episodeNumber,
        image: episodeDetails.images[0].url,
        url: Astro.url.toString(),
        datePublished: episodeDetails.release_date,
        duration: `PT${Math.floor(episodeDetails.duration_ms / 60000)}M`,
        associatedMedia: {
          "@type": "AudioObject",
          contentUrl: episodeDetails.audio_preview_url,
        },
        partOfSeries: {
          "@type": "PodcastSeries",
          name: episodeDetails.show.name,
          url: episodeDetails.show.external_urls.spotify,
        },
        author: authors,
      }}
    />
  </Fragment>

  <article class="prose max-w-3xl mx-auto px-4 py-8">
    <a
      href="/"
      class="inline-block mb-4 text-blue-600 hover:text-blue-800 transition-colors"
    >
      &larr; Tilbake til episodeoversikten
    </a>

    <section>
      <h1 class="text-3xl font-bold mb-4">{episodeDetails.name}</h1>
      <SpotifyEmbedEpisode title={episodeDetails.name} id={id} />

      <div class="mt-6">
        <p class="text-sm text-gray-600">
          Utgitt {formatDate(episodeDetails.release_date)}
          â€¢ {formatDuration(episodeDetails.duration_ms)}
        </p>
        <div class="mt-4">{episodeDetails.description}</div>
      </div>

      {
        episodeDetails.explicit && (
          <p class="mt-4 text-red-600 font-semibold">
            Denne episoden har eksplisitt innhold.
          </p>
        )
      }
    </section>

    <section>
      <h2>Vertene</h2>
      <div class="not-prose">
        <Hosts />
      </div>
    </section>

    <nav
      class="not-prose flex flex-col sm:flex-row justify-between items-stretch gap-4 my-8"
    >
      {
        previous ? (
          <EpisodeNavigation
            direction="previous"
            name={previous.name}
            slug={previous.slug}
          />
        ) : (
          <div class="flex-1" />
        )
      }
      {
        next ? (
          <EpisodeNavigation
            direction="next"
            name={next.name}
            slug={next.slug}
          />
        ) : (
          <div class="flex-1" />
        )
      }
    </nav>
  </article>

  <PodcastLinks />
</Layout>
